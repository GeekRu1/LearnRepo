1、对于基本类型，== 判断两个值是否相等，基本类型没有 equals() 方法。
对于引用类型，== 判断两个变量是否引用同一个对象，而 equals() 判断引用的对象是否等价。

2、等价的两个对象散列值一定相同，但是散列值相同的两个对象不一定等价。
所以当覆盖了equals方法时，总是应当覆盖hashCode方法，保证等价的两个对象散列值相同
当只重写了equals方法时，HashSet<T>可能会存储两个等价的对象，因为其hashCode不同

3、接口的成员默认为public的，field默认static final(只允许有常量)

4、抽象类不能直接被实例化，只能继承后实现实例化子类

5、类加载顺序
父类(静态变量、静态语句块)
子类(静态变量、静态语句块)
父类(实例变量、普通语句块)
父类(构造函数)
子类(实例变量、普通语句块)
子类(构造函数)

6、security manager

7、反射的用途，在前台请求后台方法时，struts.xml中配置的action方法就是通过invoke方法来调用的
spring框架配置的bean.xml,运行时会需要动态加载需要的对象，此时也是通过反射加载不同的类或对象

8、Java7特性
Try with Resources
String in Switch Statement
Java nio Package

9、Java8最重要的两个特性
Lambda Expressions
Pipelines and Streams
PermGen Error Removed

10、try catch finally中的各种情况return结果
try catch中有return finally没有return
当为基础类型时，且finally有对返回数据做修改，此修改无效。
因为在catch块中就已经把返回值做了存储到其他局部变量中，而执行finally并不会对这个局部变量进行修改，而后的返回直接返回此局部变量
当为引用类型时，且finally有对返回数据做属性修改，有效。做对象引用改变，无效。
因为catch块中将返回对象的地址做了存储，返回时直接返回这个地址的对象，而finally做属性修改是修改的此地址对象的内容，所以修改有效。
若修改的是对象引用，相当于将此对象引用地址改变了，但之前存储地址的对象未修改，所以修改无效

try catch finally 中都有return时
try或catch中return后面的代码会执行，但最终返回的结果为finally中return的值。
需要注意的是try或catch中return后面的代码会执行，只是存起来了，并没有返回

try中有return catch中新抛出异常，finally中有return
catch中新抛出的异常无效，上级方法捕获不到异常，finally中的return正常执行

11、redis实现分布式锁 set setParams().nx().px() 释放锁用Redis执行Lua脚本保证操作的原子性

12、sleep和wait。sleep不会放弃对象锁资源，即就是让当前线程让出cpu，且在休息定义时间后不一定会马上执行，因为cpu可能被其他线程占用或者重新分配cpu此线程优先级不够
wait是针对已经获取对象锁资源的线程进行操作，且会释放对象锁资源(进入等待池，等待池中不会去竞争该锁资源)，且只有当这个对象锁调用notify方法后此线程才能进入对象锁池
notifyAll则会将该锁对象等待池中所有的线程放入锁池中，竞争锁

13、interrupt。在线程调用这个方法时，会将interrupted status置位，而想要中断的线程需要调用isInterrupted()方法来判断当前线程是否处于中断状态
interrupted() isInterrupted()区别，interrupted是线程类的静态方法，即判断当前执行的线程的中断状态，isInterrupted需要线程对象调用。
且都是调用的isInterrupted(boolean clearInterrupted)方法，但一个参数为true 一个为false。一个清除状态，一个不清除

14、happens-before

15、设计模式
JDK中常见的设计模式，单例、静态工厂、工厂
单例的实现，静态变量，但要注意的是需要显示的把构造函数定义出来且为private修饰。
高并发的单例实现，双检锁，静态实例用volatile修饰，还可以使用内部类持有静态实例的方式，其理论依据是对象初始化过程中隐含的初始化锁
Spring中使用到的设计模式：
BeanFactory和ApplicationContext应用了工厂模式。在 Bean 的创建中，Spring 也为不同 scope 定义的对象，提供了单例和原型等模式实现
AOP 领域则是使用了代理模式、装饰器模式、适配器模式等
各种事件监听器，是观察者模式的典型应用
类似 JdbcTemplate 等则是应用了模板模式

Facade模式，外观模式:当我们希望封装或隐藏原系统。但他违背了开闭原则
隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。它向现有的系统添加一个接口，来隐藏系统的复杂性。

16、mySql

17、spring两大核心 IOC AOP
IOC(inversion of control控制反转) 动态注入，控制权由对象本身转向容器；由容器根据配置文件去创建实例并创建各个实例之间的依赖关系
核心：bean工厂；在Spring中，bean工厂创建的各个实例称作bean
AOP(Aspect-Oriented Programming) 面向切面编程
可以为某一类对象 进行监督和控制（也就是 在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。
两种动态代理，继承InvocationHandler重写invoke方法

18、正则表达式

19、类加载机制
双亲委派模型，当类加载器试图加载某个类时，除非父加载器找不到相应类型，否则尽量将加载任务交给父加载器，这是为了避免重复加载Java类。(选择加载器的顺序，父到子)
Java8之前常用类加载器。
启动类加载器Bootstrap Class-Loader，加载jre/lib目录下的jar文件，如rt.jar
扩展类加载器Extension Class-Loader,负责加载我们放到jre/lib/ext目录下的jar包，这就是所谓的extension机制
应用类加载器Application Class-Loader,加载我们classpath内容

20、每个线程操作数据的时候会把数据从主内存读取到自己的工作内存，如果他操作了数据并且写回内存了，
他其他已经读取的线程的变量副本就会失效了，需要数据进行操作又要再次去主内存中读取了
volatile，也就是说一个线程修改了volatile修饰的变量，当修改写回主内存时，另外一个线程可以立即看到最新的值

volatile可以用作单例模式双重检查，提供可见性和禁止指令重排序

21、HashMap里有自己的hash方法，并不是key本身的hashCode。做法是将hashCode后的高位数据移位到低位进行异或运算。
这是因为有些数据计算出的哈希值差异主要在高位，而 HashMap 里的哈希寻址是忽略容量以上的高位的，那么这种处理就可以有效避免类似情况下的哈希碰撞

22、HashMap树化改造，因为在元素放置过程中，如果一个对象哈希冲突，都被放置到同一个桶里，则会形成一个链表，我们知道链表查询是线性的，会严重影响存取的性能
常见安全问题，哈希碰撞拒绝服务攻击

哈希冲突解决方式：
rehash
链表


23、ConcurrentHashMap基于lock实现锁分段技术。首先将Map存放的数据分成一段一段的存储方式(segment)，然后给每一段数据分配一把锁，
当一个线程占用锁访问其中一个段的数据时，其他段的数据也能被其他线程访问。ConcurrentHashMap不仅保证了多线程运行环境下的数据访问安全性，而且性能上有长足的提升

24、动态代理，在目标类的基础上增加切面逻辑，生成增强的目标类。不同的切入时机对应不同的Interceptor的种类(after before throws)
基于JDK的动态代理，CGLIB(ASM)动态代理
JDK的动态代理基于反射原理实现，需要基于Interface才能实现。具体就是业务接口类、业务实现类、继承InvocationHandler类。
可以使你不侵犯业务逻辑代码，但对他业务逻辑前后加上扩展。具体就是实现invoke方法，invoke方法来调用你的业务实现类



25、Java 8 以后，接口也是可以有方法实现的
SOLID原则，面向对象的基本设计原则
单一原则(Single Responsibility),类或者对象最好是只有单一职责，在程序设计中如果发现某个类承担着多种义务，可以考虑进行拆分
开闭原则(Open-Close),设计要对扩展开放，对修改关闭
里氏替换原则(Liskov Substitution),这是面向对象的基本要素之一，进行继承关系抽象时，凡是可以用父类或者基类的地方，都可以用子类替换
接口分离原则(Interface Segregation),我们在进行类和接口设计时，如果在一个接口里定义了太多方法，其子类很可能面临两难，就是只有部分方法对它是有意义的，这就破坏了程序的内聚性
依赖反转(Dependency Inversion),实体应该依赖于抽象而不是实现。也就是说高层次模块，不应该依赖于低层次模块，而是应该基于抽象

26、ReentrantLock,java并发包里的重入锁。什么是重入呢，它是表示当一个线程试图获取一个它已经获取的锁时，这个获取动作就自动成功(不会导致死锁的发生)
再入锁可以设置公平性（fairness），我们可在创建再入锁时选择是否是公平的，公平性是指当竞争时，会倾向于将锁赋予等待时间最久的线程。
与synchronized不同，获取到锁的线程可以响应中断，当获取到锁的线程被中断时，中断异常将会被抛出，同时锁会被释放
Lock只适用于代码块锁，而synchronized可用于修饰方法、代码块等
Lock必须有释放锁的动作，try catch包裹的语句中，unlock要写在finally里

27、synchronized 代码块是由一对儿 monitorenter/monitorexit 指令实现的，Monitor 对象是同步的基本实现

28、同一个线程调用两次start方法会怎么样，线程可能处于终止或者其他（非 NEW）状态，但是不论如何，都是不可以再次启动的。
并发类库中的工具，比如 CountDownLatch.await() 会让当前线程进入等待状态，直到 latch 被基数为 0，这可以看作是线程间通信的 Signal

先来看看守护线程（Daemon Thread），有的时候应用中需要一个长期驻留的服务程序，但是不希望其影响应用退出，就可以将其设置为守护线程，如果 JVM 发现只有守护线程存在时，将结束进程，具体可以参考下面代码段。注意，必须在线程启动之前设置

29、ThreadLocal,这是 Java 提供的一种保存线程私有信息的机制，因为其在整个线程生命周期内有效，所以可以方便地在一个线程关联的不同业务模块之间传递信息
其实数据存储于线程相关的ThreadLocalMap中，虽然其条目是弱引用，通常弱引用都会和引用队列配合清理机制使用，但是 ThreadLocal 是个例外
这意味着，废弃项目的回收依赖于显式地触发，否则就要等待线程结束，进而回收相应 ThreadLocalMap！这就是很多 OOM 的来源。
所以通常都会建议，应用一定要自己负责 remove，并且不要和线程池配合，因为worker线程池通常是不会退出的

30、JVM内存区域划分，程序计数器：程序计数器会存储当前线程正在执行的 Java 方法的 JVM 指令地址
Java虚拟机栈：每个线程在创建时都会创建一个虚拟机栈，其内部保存一个个的栈帧（Stack Frame），对应着一次次的 Java 方法调用
堆：它是 Java 内存管理的核心区域，用来放置 Java 对象实例，几乎所有创建的 Java 对象实例都是被直接分配在堆上，堆被所有的线程共享。(新生代、老年代)
方法区：这也是所有线程共享的一块内存区域，用于存储所谓的元（Meta）数据，例如类结构信息，以及对应的运行时常量池、字段、方法代码等
运行时常量池：这是方法区的一部分
本地方法栈：它和 Java 虚拟机栈是非常相似的，支持对本地方法的调用，也是每个线程都会创建一个

31、Intern 字符串的缓存和静态变量曾经都被分配在永久代上，而永久代已经被元数据区取代。但是，Intern 字符串缓存和静态变量并不是被转移到元数据区，而是直接在堆上分配，所以这一点同样符合前面一点的结论：对象实例都是分配在堆上

32、OOM问题，除了程序计数器，其他区域都有可能会因为可能的空间不足发生 OutOfMemoryError
堆内存不足是最常见的 OOM 原因之一，可能内存泄漏问题；也很有可能就是堆的大小不合理
而对于Java虚拟机栈或本地方法栈，则可能是某个方法导致了无法退出的递归，程序一般是报StackOverFlowError，当占用内存过大时就会抛出OOM

33、Java并发类库提供的几种线程池有哪些？
corePoolSize，所谓的核心线程数，可以大致理解为长期驻留的线程数目（除非设置了 allowCoreThreadTimeOut）。
对于不同的线程池，这个值可能会有很大区别，比如 newFixedThreadPool 会将其设置为 nThreads，而对于 newCachedThreadPool 则是为 0
maximumPoolSize，顾名思义，就是线程不够时能够创建的最大线程数。同样进行对比，对于 newFixedThreadPool，
当然就是 nThreads，因为其要求是固定大小，而 newCachedThreadPool 则是 Integer.MAX_VALUE
keepAliveTime 和 TimeUnit，这两个参数指定了额外的线程能够闲置多久，显然有些线程池不需要它

34、TCP/IP协议集包括应用层,传输层，网络层，网络访问层。其中TCP是属于网络分层中的运输层(传输层)
TCP(transmission control protocol)是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接
TCP的三次握手
第一次握手，客户端给服务器发送一个SYN段(在 TCP 标头中 SYN 位字段为 1 的 TCP/IP 数据包), 该段中也包含客户端的初始序列号(Sequence number = J)。
此时client状态变为syn_sent，当半连接队列(syn queue)未满时，服务端会直接接受此连接并丢入队列，状态变为syn_rcvd
syn flood攻击，就是客户端不断给服务端发送SYN，但对服务端返回的SYN+ACK直接忽略。占据大量的半连接队列资源，导致正常客户端无法连接上服务端。
第二次握手，服务器返回客户端 SYN +ACK 段(在 TCP 标头中SYN和ACK位字段都为 1 的 TCP/IP 数据包)， 该段中包含服务器的初始序列号(Sequence number = K)；
同时使 Acknowledgment number = J + 1来表示确认已收到客户端的 SYN段(Sequence number = J)
client收到syn+ack后，状态变为established
第三次握手，客户端给服务器响应一个ACK段(在 TCP 标头中 ACK 位字段为 1 的 TCP/IP 数据包), 该段中使 Acknowledgment number = K + 1来表示确认已收到服务器的 SYN段(Sequence number = K)
全连接队列(accept queue)未满时，服务端该连接状态变为established，并将此连接从半连接队列里删除，把连接信息全部放入全连接队列中
TCP的四次挥手
当主机A完成数据传输后,将控制位FIN置1,提出停止TCP连接的请求
主机B收到FIN后对其作出响应,确认这一方向上的TCP连接将关闭,将ACK置1
由B 端再提出反方向的关闭请求,将FIN置1
主机A对主机B的请求进行确认,将ACK置1,双方向的关闭结束

35、TCP UDP区别，UDP(user data protocol)是一个非连接的协议，传输数据之前服务端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它扔到网络上
基于连接与无连接；
对系统资源的要求（TCP较多，UDP少）；
UDP程序结构较简单；
流模式与数据报模式 ；
TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证

36、IO/NIO/AIO 网络通信、文件的操作都是IO操作
NIO(No-Block IO)非阻塞IO：Buffer、Channel、Selector

IO 都是同步阻塞模式，所以需要多线程以实现多任务处理。此种方式创建线程池可以有效避免线程大量创建销毁所带来的性能消耗。
通过固定大小的线程池，来负责管理工作线程。即对应多个client--socket(stream)--server(Thread)
这种情况在连接数不多的情况下，性能可以得到有效好的保障，但如果连接数急剧上升，这种方式就无法很好的工作了，
因为线程上下文切换开销会在高并发时变得很明显，这就是同步阻塞IO的低劣扩展性

NIO引入了多路复用机制，提供了一个很好的思路。
首先Selector.open()创建一个selector作为类似调度员的角色
然后，创建一个 ServerSocketChannel，并且向 Selector 注册，通过指定 SelectionKey.OP_ACCEPT，告诉调度员，它关注的是新的连接请求
tips:serverSocket.configureBlocking(false)，指定是非阻塞模式，否则serverSocketChannel.register注册操作是不被允许的。
Selector 阻塞在 select 操作，当有 Channel 发生接入请求，就会被唤醒。
然后就可以遍历过来的接入请求,建立连接发送字节/字符
Set selectedKeys = selector.selectedKeys(); Iterator<SelectionKey> iter = selectedKeys.iterator();
while(iter.hasNext()) { xxxMethod((ServerSocketChannel) key.channel());}
可以看到IO 都是同步阻塞模式，所以需要多线程以实现多任务处理。而 NIO 则是利用了单线程轮询事件的机制，
通过高效地定位就绪的 Channel，来决定做什么，仅仅 select 阶段是阻塞的，可以有效避免大量客户端连接时，频繁线程切换带来的问题
即多个client--SocketChannel对应一个Selector,Selector接收多个连接keys(迭代器,包含所有Channel收到的信息)到服务端，然后来执行你数据接收的业务逻辑
业务逻辑你可以直接选择在这个线程里完成，也可以分发给其他线程来执行

NIO2(AIO),又增添了一种额外的异步 IO 模式，利用事件和回调，处理 Accept、Read、Write 等操作
业务逻辑的关键在于，通过指定 CompletionHandler 回调接口，在 accept/read/write 等关键节点，通过事件机制调用，这是非常不同的一种编程思路

37、文件拷贝实现的机制
文件拷贝的三种方法：
FileInputStream/FileOutputStream提供的读写方法
java.nio类库中提供的transferTo/transferFrom方法实现
Java 标准类库本身已经提供了几种 Files.copy 的实现

道操作系统层面的概念，用户态空间（User Space）和内核态空间（Kernel Space），这是操作系统层面的基本概念，
操作系统内核、硬件驱动等运行在内核态空间，具有相对高的特权；而用户态空间，则是给普通应用和服务使用

当我们在使用输入输出流的时候，实际上进行了多次上下文的切换，比如应用读取数据，是从磁盘先读取到内核缓存然后再切换用户态，
再将数据从内核态缓存读取到用户态缓存，写入操作也是类似如此。这种方式会带来一定额外的开销，可能降低IO效率。
而基于 NIO transferTo的实现方式，在Linux和Unix上，则会使用到零拷贝技术，数据传输并不需要用户态参与，省去了上下文切换的开销和不必要的内存拷贝

NIO Buffer,Java 为每种原始数据类型都提供了相应的 Buffer 实现（布尔除外）
重要参数：capacity,反应这个buffer有多大，也就是数组的长度
position,要操作的数据起始位置
limit,相当于操作的限额。在读取或者写入时，limit 的意义很明显是不一样的。
比如，读取操作时，很可能将 limit 设置到所容纳数据的上限；而在写入时，则会设置容量或容量以下的可写限度
mark,记录上一次position的位置，默认是0

Direct Buffer 不在heap中，堆外buffer
在实际使用中，Direct Buffer仅做本地IO操作，对于很多大数据量的IO密集操作，可能会带来很大的性能优势。
Direct Buffer 生命周期内内存地址都不会再发生更改，进而内核可以安全地对其进行访问，很多 IO 操作会很高效
减少了堆内对象存储的可能额外维护工作，所以访问效率可能有所提高

但需要注意的是，Direct Buffer创建和销毁的开销比一般的堆内Buffer要大，所以通常建议长期使用、数据较大的场景
他对内存和JVM参数的影响，Xmx之类的参数并不能影响DB,因为他不在堆内




























